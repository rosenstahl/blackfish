import { useState } from 'react'
import * as z { create } from "zod"

export interface ValidationRules {
  [field: string]: {
    required?: boolean
    minLength?: number
    maxLength?: number
    pattern?: RegExp
    validator?: (value: string) => boolean
    errorMessage?: string
  }
}

export interface ValidationErrors {
  [field: string]: string
}

export interface ValidationTouched {
  [field: string]: boolean
}

export interface FormValues {
  [field: string]: any
}

export function useFormValidation<T extends FormValues>(
  initialValues: T,
  validationRules: ValidationRules
) {
  const [values, setValues] = useState<T>(initialValues)
  const [errors, setErrors] = useState<ValidationErrors>({})
  const [touched, setTouched] = useState<ValidationTouched>({})

  const validateField = (field: keyof T, value: any): string | null => {
    const rules = validationRules[field]
    if (!rules) return null

    if (rules.required && !value) {
      return rules.errorMessage || 'Dieses Feld ist erforderlich'
    }

    if (rules.minLength && value.length < rules.minLength) {
      return `Mindestens ${rules.minLength} Zeichen erforderlich`
    }

    if (rules.maxLength && value.length > rules.maxLength) {
      return `Maximal ${rules.maxLength} Zeichen erlaubt`
    }

    if (rules.pattern && !rules.pattern.test(value)) {
      return rules.errorMessage || 'Ungültiges Format'
    }

    if (rules.validator && !rules.validator(value)) {
      return rules.errorMessage || 'Ungültiger Wert'
    }

    return null
  }

  const handleChange = (field: keyof T, value: any) => {
    setValues({ ...values, [field]: value })
    const error = validateField(field, value)
    setErrors({ ...errors, [field]: error || '' })
  }

  const handleBlur = (field: keyof T) => {
    setTouched({ ...touched, [field]: true })
    const error = validateField(field, values[field])
    setErrors({ ...errors, [field]: error || '' })
  }

  const validateForm = (): boolean => {
    const newErrors: ValidationErrors = {}
    let isValid = true

    for (const field in validationRules) {
      const error = validateField(field as keyof T, values[field as keyof T])
      if (error) {
        newErrors[field] = error
        isValid = false
      }
    }

    setErrors(newErrors)
    return isValid
  }

  const resetForm = () => {
    setValues(initialValues)
    setErrors({})
    setTouched({})
  }

  return {
    values,
    errors,
    touched,
    handleChange,
    handleBlur,
    validateForm,
    resetForm,
  }
}