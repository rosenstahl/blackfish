version: '3.8'

x-logging: &default-logging
  options:
    max-size: "10m"
    max-file: "3"
  driver: json-file

x-healthcheck: &default-healthcheck
  interval: 30s
  timeout: 10s
  retries: 3
  start_period: 40s

services:
  web:
    build:
      context: .
      dockerfile: Dockerfile
      target: runner
      args:
        NODE_ENV: production
    restart: unless-stopped
    ports:
      - "3000:3000"
    volumes:
      - .:/app:ro
      - /app/node_modules
      - /app/.next
      - app-uploads:/app/public/uploads
    environment:
      - NODE_ENV=production
      - NEXT_TELEMETRY_DISABLED=1
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL}
      - SENTRY_DSN=${SENTRY_DSN}
      - REDIS_URL=redis://redis:6379
    env_file: .env.production
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:3000/api/health"]
      <<: *default-healthcheck
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G
      update_config:
        parallelism: 1
        delay: 10s
        order: start-first
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    logging: *default-logging
    security_opt:
      - no-new-privileges:true
    read_only: true
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE

  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes
    ports:
      - "127.0.0.1:6379:6379"
    volumes:
      - redis-data:/data
      - ./redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      <<: *default-healthcheck
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
      restart_policy:
        condition: on-failure
    logging: *default-logging
    security_opt:
      - no-new-privileges:true
    read_only: true

  test:
    build:
      context: .
      dockerfile: Dockerfile
      target: tester
    volumes:
      - .:/app:ro
      - /app/node_modules
      - test-results:/app/test-results
    environment:
      - NODE_ENV=test
      - NEXT_TELEMETRY_DISABLED=1
      - CI=true
      - JEST_JUNIT_OUTPUT_DIR=/app/test-results/junit/
    env_file: .env.test
    depends_on:
      web:
        condition: service_healthy
    networks:
      - app-network
    logging: *default-logging

volumes:
  redis-data:
    driver: local
    driver_opts:
      type: none
      device: ${PWD}/data/redis
      o: bind
  app-uploads:
    driver: local
    driver_opts:
      type: none
      device: ${PWD}/data/uploads
      o: bind
  test-results:
    driver: local

networks:
  app-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.28.0.0/16

# Development-spezifische Ãœberschreibungen
x-development:
  web:
    build:
      target: development
    command: npm run dev
    volumes:
      - .:/app
      - /app/node_modules
    environment:
      - NODE_ENV=development
      - DEBUG=app:*
    env_file: .env.development

  test:
    command: npm run test:watch
    volumes:
      - .:/app
      - /app/node_modules
      - /app/coverage
    environment:
      - NODE_ENV=test
      - DEBUG=app:*
    env_file: .env.test